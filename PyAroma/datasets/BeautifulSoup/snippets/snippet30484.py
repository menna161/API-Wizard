from bs4 import BeautifulSoup
from dexy.filters.api import ApiFilter
import asyncio
import json
import mimetypes
import markdown
from nio import AsyncClient


def process(self):
    if (self.input_data.ext in '.html'):
        text = str(self.input_data)
        soup = BeautifulSoup(text, 'html.parser')
        modified_html = text.replace('style="color: ', 'data-mx-color="').replace('style="background: ', 'data-mx-bg-color="')
        content = {'msgtype': 'm.text', 'format': 'org.matrix.custom.html', 'body': soup.get_text(), 'formatted_body': modified_html}
    elif (self.input_data.ext in '.md'):
        text = str(self.input_data)
        html = markdown.markdown(text, extensions=['fenced_code'])
        soup = BeautifulSoup(html, 'html.parser')
        for code_block in soup.find_all('code'):
            code_block['class'] = ('language-%s' % code_block['class'][0])
            code_block.string = code_block.string.lstrip()
        content = {'msgtype': 'm.text', 'format': 'org.matrix.custom.html', 'body': soup.get_text(), 'formatted_body': str(soup)}
    elif (self.input_data.ext in '.txt'):
        text = str(self.input_data)
        content = {'msgtype': 'm.text', 'body': text}
    elif (self.input_data.ext in ('.png', '.jpeg', '.jpg', '.bmp')):
        if hasattr(self.doc, 'created_by_doc'):
            description = ('image %s generated by script %s' % (self.input_data.name, self.doc.created_by_doc.name))
        else:
            description = ('automatically generated image %s' % self.input_data.name)
        content = {'msgtype': 'm.image', 'body': description}
    else:
        content = {'msgtype': 'm.file', 'filename': self.input_data.name, 'body': self.input_data.name}
    loop = asyncio.get_event_loop()
    response = loop.run_until_complete(main_nio(homeserver=self.read_param('homeserver'), user=self.read_param('username'), password=self.read_param('password'), room_id=self.setting('room-id'), ext=self.input_data.ext, mimetype=mimetypes.guess_type(self.input_data.name)[0], data_provider=self.data_provider, content=content, log_fn=self.log_debug))
    self.output_data.set_data(json.dumps(response))
