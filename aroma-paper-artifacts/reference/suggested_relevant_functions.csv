"My Function,Suggested Functions"
"tf.concat,tf.split, tf.stack, tf.reshape, tf.squeeze, tf.expand_dims"
"tf.pad,tf.slice, tf.tile, tf.strided_slice"
"tf.random.normal,tf.random.uniform, tf.random.poisson, tf.random.gamma"
"tf.random.uniform,tf.random.normal, tf.random.poisson, tf.random.gamma"
"torch.randn,torch.rand, torch.normal, torch.bernoulli"
"train_test_split,cross_val_score, KFold, StratifiedKFold"
"plt.figure,plt.subplots, plt.title, plt.xlabel, plt.ylabel"
"plt.plot,plt.scatter, plt.bar, plt.hist"
"plt.show,None"
"plt.subplots,plt.figure, plt.title, plt.xlabel, plt.ylabel"
"randint,random, randrange, choice"
"nn.Linear,nn.Conv2d, nn.ReLU, nn.BatchNorm2d"
"nn.Sequential,nn.ModuleList, nn.ModuleDict, nn.Module"
"np.argmax,np.argmin, np.argsort, np.nanargmax"
"np.identity,np.eye, np.diag, np.diagflat"
"np.linspace,np.logspace, np.geomspace, np.arange"
"drop,pandas.DataFrame.dropna, pandas.DataFrame.drop_duplicates, pandas.DataFrame.pop"
"find_all,BeautifulSoup.find, BeautifulSoup.select, BeautifulSoup.select_one"
"groupby,pandas.DataFrame.pivot_table, pandas.DataFrame.aggregate, pandas.DataFrame.transform"
"get_text,BeautifulSoup.prettify, BeautifulSoup.stripped_strings, BeautifulSoup.get"
"Model,keras.Sequential, keras.layers.Dense, keras.layers.Conv2D"
"np.identity,np.eye, np.diag"
"np.linspace,np.logspace, np.geomspace"
"Conv2D,keras.layers.MaxPooling2D, keras.layers.Flatten"
"cv2.imread,cv2.cvtColor, cv2.resize"
"Dense,keras.layers.Activation, keras.layers.Dropout"
"drop_duplicates, pandas.DataFrame.drop, pandas.DataFrame.duplicated, pandas.DataFrame.groupby, pandas.DataFrame.merge"
"BeautifulSoup, requests.get, lxml.html.fromstring, requests.post, lxml.etree.ElementTree"
"confusion_matrix, sklearn.metrics.classification_report, sklearn.metrics.accuracy_score, sklearn.metrics.f1_score, sklearn.metrics.precision_score"
"MaxPooling2D, keras.layers.Conv2D, keras.layers.Flatten, keras.layers.BatchNormalization, keras.layers.Dense"
"nn.MSELoss, torch.nn.L1Loss, torch.nn.CrossEntropyLoss, torch.optim.Adam, torch.optim.SGD"
"LogisticRegression,sklearn.model_selection.train_test_split, sklearn.metrics.accuracy_score, sklearn.preprocessing.StandardScaler"
"soup.find, BeautifulSoup.find_all, BeautifulSoup.select, re.findall"
"pd.read_pickle,pd.to_pickle, pd.read_csv, pd.read_excel"
"torch.randperm, torch.randn, torch.rand, torch.tensor"
"value_counts, pd.unique, pd.DataFrame.drop_duplicates, pd.Series.nunique"
"fit_transform, fit, transform, inverse_transform, fit_predict"
"LinearRegression, fit, predict, score, coef_, intercept_, get_params, set_params, residuals, summary"
"MinMaxScaler,fit_transform,transform,inverse_transform"
"cv2.contourArea,cv2.drawContours,cv2.arcLength,cv2.approxPolyDP"
"classification_report,confusion_matrix,accuracy_score,f1_score"
"cv2.findContours,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE,cv2.drawContours"
"cv2.imshow,cv2.waitKey,cv2.destroyAllWindows,cv2.imwrite"
"optim.SGD,zero_grad,step,backward"
"prettify,BeautifulSoup,get_text,find_all"
"sns.boxplot,set_title,set_xlabel,set_ylabel"
"sns.scatterplot,set_title,set_xlabel,set_ylabel"
