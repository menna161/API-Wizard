import contextlib
import datetime
import tempfile
import uuid
from pathlib import Path
from typing import Iterator, List, Union
import numpy as np
import pandas as pd
import pyarrow
import pytz
from feast import FeatureService, FeatureStore, FeatureView
from feast.errors import FeatureViewNotFoundException
from feast.feature_logging import LOG_DATE_FIELD, LOG_TIMESTAMP_FIELD, REQUEST_ID_FIELD
from feast.protos.feast.serving.ServingService_pb2 import FieldStatus


def generate_expected_logs(df: pd.DataFrame, feature_view: FeatureView, features: List[str], join_keys: List[str], timestamp_column: str) -> pd.DataFrame:
    '\n    Given dataframe and feature view, generate the expected logging dataframes that would be otherwise generated by our logging infrastructure.\n    Args:\n        df: Dataframe of features values returned in `get_online_features`.\n        feature_view : The feature view from which the features were retrieved.\n        features : The list of features defined as part of this base feature view.\n        join_keys : Join keys for the retrieved features.\n        timestamp_column : Timestamp column\n\n    Returns:\n        Returns dataframe containing the expected logs.\n    '
    logs = pd.DataFrame()
    for join_key in join_keys:
        logs[join_key] = df[join_key]
    for feature in features:
        col = f'{feature_view.name}__{feature}'
        logs[col] = df[feature]
        logs[f'{col}__timestamp'] = df[timestamp_column]
        logs[f'{col}__status'] = FieldStatus.PRESENT
        if feature_view.ttl:
            logs[f'{col}__status'] = logs[f'{col}__status'].mask((df[timestamp_column] < (datetime.datetime.utcnow().replace(tzinfo=pytz.UTC) - feature_view.ttl)), FieldStatus.OUTSIDE_MAX_AGE)
    return logs.sort_values(by=join_keys).reset_index(drop=True)
