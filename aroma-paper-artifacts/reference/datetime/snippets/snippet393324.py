import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from pytz import FixedOffset, timezone, utc
from random import randint
from enum import Enum
from sqlalchemy import create_engine, DateTime
from datetime import datetime


def create_customer_daily_profile_df(customers, start_date, end_date) -> pd.DataFrame:
    '\n    Example df generated by this function:\n    | datetime         | customer_id | current_balance | avg_passenger_count | lifetime_trip_count | created          |\n    |------------------+-------------+-----------------+---------------------+---------------------+------------------|\n    | 2021-03-17 19:31 | 1010        | 0.889188        |     0.049057        |          412        | 2021-03-24 19:38 |\n    | 2021-03-18 19:31 | 1010        | 0.979273        |     0.212630        |          639        | 2021-03-24 19:38 |\n    | 2021-03-19 19:31 | 1010        | 0.976549        |     0.176881        |           70        | 2021-03-24 19:38 |\n    | 2021-03-20 19:31 | 1010        | 0.273697        |     0.325012        |           68        | 2021-03-24 19:38 |\n    | 2021-03-21 19:31 | 1010        | 0.438262        |     0.313009        |          192        | 2021-03-24 19:38 |\n    |                  |  ...        |      ...        |          ...        |          ...        |                  |\n    | 2021-03-19 19:31 | 1001        | 0.738860        |     0.857422        |          344        | 2021-03-24 19:38 |\n    | 2021-03-20 19:31 | 1001        | 0.848397        |     0.745989        |          106        | 2021-03-24 19:38 |\n    | 2021-03-21 19:31 | 1001        | 0.301552        |     0.185873        |          812        | 2021-03-24 19:38 |\n    | 2021-03-22 19:31 | 1001        | 0.943030        |     0.561219        |          322        | 2021-03-24 19:38 |\n    | 2021-03-23 19:31 | 1001        | 0.354919        |     0.810093        |          273        | 2021-03-24 19:38 |\n    '
    df_daily = pd.DataFrame({'datetime': [pd.Timestamp(dt, unit='ms', tz='UTC').round('ms') for dt in pd.date_range(start=start_date, end=end_date, freq='1D', closed='left')]})
    df_all_customers = pd.DataFrame()
    for customer in customers:
        df_daily_copy = df_daily.copy()
        rows = df_daily_copy['datetime'].count()
        df_daily_copy['customer_id'] = customer
        df_daily_copy['current_balance'] = np.random.uniform(low=10.0, high=50.0, size=rows).astype(np.float32)
        df_daily_copy['lifetime_trip_count'] = np.linspace(start=randint(10, 20), stop=randint(40, 50), num=rows).astype(np.int32)
        df_daily_copy['avg_passenger_count'] = np.random.uniform(low=1, high=3, size=rows).astype(np.float32)
        df_all_customers = pd.concat([df_daily_copy, df_all_customers])
    df_all_customers.reset_index(drop=True, inplace=True)
    rows = df_all_customers['datetime'].count()
    df_all_customers['created'] = pd.to_datetime(pd.Timestamp.now(tz=None).round('ms'))
    return df_all_customers
