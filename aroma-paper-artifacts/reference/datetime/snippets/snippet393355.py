import itertools
from enum import Enum
import numpy as np
import pandas as pd
from pytz import FixedOffset, timezone, utc
from feast.infra.offline_stores.offline_utils import DEFAULT_ENTITY_DF_EVENT_TIMESTAMP_COL


def create_global_daily_stats_df(start_date, end_date) -> pd.DataFrame:
    '\n    Example df generated by this function:\n\n    | event_timestamp  | num_rides   | avg_ride_length | created          |\n    |------------------+-------------+-----------------+------------------|\n    | 2021-03-17 19:00 | 99          | 0.889188        | 2021-03-24 19:38 |\n    | 2021-03-18 19:00 | 52          | 0.979273        | 2021-03-24 19:38 |\n    | 2021-03-19 19:00 | 66          | 0.976549        | 2021-03-24 19:38 |\n    | 2021-03-20 19:00 | 84          | 0.273697        | 2021-03-24 19:38 |\n    | 2021-03-21 19:00 | 89          | 0.438262        | 2021-03-24 19:38 |\n    |                  |  ...        |      ...        |                  |\n    | 2021-03-24 19:00 | 54          | 0.738860        | 2021-03-24 19:38 |\n    | 2021-03-25 19:00 | 58          | 0.848397        | 2021-03-24 19:38 |\n    | 2021-03-26 19:00 | 69          | 0.301552        | 2021-03-24 19:38 |\n    | 2021-03-27 19:00 | 63          | 0.943030        | 2021-03-24 19:38 |\n    | 2021-03-28 19:00 | 79          | 0.354919        | 2021-03-24 19:38 |\n    '
    df_daily = pd.DataFrame({'event_timestamp': [pd.Timestamp(dt, unit='ms', tz='UTC').round('ms') for dt in pd.date_range(start=start_date, end=end_date, freq='1D', inclusive='left')]})
    rows = df_daily['event_timestamp'].count()
    df_daily['num_rides'] = np.random.randint(50, 100, size=rows).astype(np.int32)
    df_daily['avg_ride_length'] = np.random.random(size=rows).astype(np.float32)
    df_daily['created'] = pd.to_datetime(pd.Timestamp.now(tz=None).round('ms'))
    return df_daily
