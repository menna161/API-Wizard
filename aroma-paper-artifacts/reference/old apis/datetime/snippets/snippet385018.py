from __future__ import print_function
from builtins import input
import argparse
import datetime
import os
import sys
import boto3.session
import botocore
import botocore.exceptions
import botocore.session
import pytz
from six import PY2
from six.moves import configparser
from six.moves import shlex_quote
from ._version import VERSION


def parse_args(args):
    if (args is None):
        args = sys.argv[1:]
    parser = argparse.ArgumentParser(prog='awsmfa', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--version', action='version', version=VERSION, help='Display version number and exit.')
    parser.add_argument('role_to_assume', nargs='?', metavar='role-to-assume', default=os.environ.get('AWS_MFA_ROLE_TO_ASSUME'), help="Full ARN of the role you wish to assume. If not provided, the temporary credentials will inherit the user's policies. The temporary credentials will also satisfy the aws:MultiFactorAuthPresent condition variable. If the AWS_MFA_ROLE_TO_ASSUME environment variable is set, it will be used as the default value.")
    parser.add_argument('--aws-credentials', default=os.environ.get('AWS_SHARED_CREDENTIALS_FILE', os.path.join(os.path.expanduser('~'), '.aws/credentials')), help='Full path to the credentials file used by AWS CLI and SDKs. If the AWS_SHARED_CREDENTIALS_FILE environment variable is set, it will be used as the default value.')
    parser.add_argument('-d', '--duration', type=int, default=int(os.environ.get('AWS_MFA_DURATION', SIX_HOURS_IN_SECONDS)), help='The number of seconds that you wish the temporary credentials to be valid for. For role assumption, this will be limited to an hour. If the AWS_MFA_DURATION environment variable is set, it will be used as the default value.')
    parser.add_argument('-i', '--identity-profile', default=os.environ.get('AWS_MFA_IDENTITY_PROFILE', 'identity'), help='Name of the section in the credentials file representing your long-lived credentials. All values in this section (including custom parameters such as "region" or "s3") will be copied to the --target-profile, with the access key, secret key, and session key replaced by the temporary credentials. If the AWS_MFA_IDENTITY_PROFILE environment variable is set, it will be used as the default value.')
    parser.add_argument('--serial-number', default=os.environ.get('AWS_MFA_SERIAL_NUMBER', None), help='Full ARN of the MFA device. If not provided, this will be read from the AWS_MFA_SERIAL_NUMBER environment variable or queried from IAM automatically. For automatic detection to work, your identity profile must have IAM policies that allow "aws iam get-user" and "aws iam list-mfa-devices".')
    parser.add_argument('-t', '--target-profile', default=os.environ.get('AWS_MFA_TARGET_PROFILE', 'default'), help='Name of the section in the credentials file to overwrite with temporary credentials. This defaults to "default" because most tools read that profile. The existing values in this profile will be overwritten. If the AWS_MFA_TARGET_PROFILE environment variable is set, it will be used as the default value.')
    parser.add_argument('--role-session-name', default=('awsmfa_%s' % datetime.datetime.now().strftime('%Y%m%dT%H%M%S')), help='The name of the temporary session. Applies only when assuming a role.')
    parser.add_argument('-c', '--token-code', default=os.environ.get('AWS_MFA_TOKEN_CODE'), help='The 6 digit numeric MFA code generated by your device, or "skip". If the AWS_MFA_TOKEN_CODE environment variable is set, it will be used as the default value. If this is "skip", temporary credentials will still be acquired but they will not satisfy the sts:MultiFactorAuthPresent condition.')
    parser.add_argument('--rotate-identity-keys', default=safe_bool(os.environ.get('AWS_MFA_ROTATE_IDENTITY_KEYS', False)), action='store_true', help='Rotate the identity profile access keys immediately upon successful acquisition of temporary credentials. This deletes your identity profile access keys from the --aws-credentials file and from AWS using the IAM DeleteAccessKey API, and then writes a new identity access key pair using the results of IAM CreateAccessKey. If the AWS_MFA_ROTATE_IDENTITY_KEYS environment variable is set to True, this behavior is enabled by default.')
    parser.add_argument('--env', default=safe_bool(os.environ.get('AWS_MFA_ENV', False)), action='store_true', help='Print the AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, and AWS_SESSION_TOKEN environment variables in a form suitable for evaluation in a shell.')
    args = parser.parse_args(args)
    return args
