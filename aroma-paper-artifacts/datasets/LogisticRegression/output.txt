------------------------- example 1 ------------------------ 
def train_models(self, y_train):
    self.models = []
    if (self.experiment.multinomial_type == 'manual'):
        for i in range(0, self.c):
            (m, r) = self.get_mdl(get_class_column(y_train, i))
            self.models.append((m, r))
    elif ((self.experiment.multinomial_type == 'multinomial') or (self.experiment.multinomial_type == 'ovr')):
        m = LogisticRegression(C=self.experiment.C, penalty=self.experiment.penalty, dual=self.experiment.dual, solver=self.experiment.solver, max_iter=self.experiment.max_iter, multi_class=self.experiment.multinomial_type, class_weight=self.experiment.class_weight)
        x_nb = self.trn_term_doc
        self.models.append(m.fit(x_nb, y_train))
    else:
// your code ...


examples  ||  representativeness  ||  number of lines  || number of comments 
example1  ||          2           ||        12         ||         1        

avg       ||          2.0           ||        12.0         ||         1.0        

idx = 0:------------------- similar code ------------------ index = 2, score = 1.0 
def train_models(self, y_train):
    self.models = []
    if (self.experiment.multinomial_type == 'manual'):
        for i in range(0, self.c):
            (m, r) = self.get_mdl(get_class_column(y_train, i))
            self.models.append((m, r))
    elif ((self.experiment.multinomial_type == 'multinomial') or (self.experiment.multinomial_type == 'ovr')):
        m = LogisticRegression(C=self.experiment.C, penalty=self.experiment.penalty, dual=self.experiment.dual, solver=self.experiment.solver, max_iter=self.experiment.max_iter, multi_class=self.experiment.multinomial_type, class_weight=self.experiment.class_weight)
        x_nb = self.trn_term_doc
        self.models.append(m.fit(x_nb, y_train))
    else:
        raise Exception(f'Unsupported multinomial_type {self.experiment.multinomial_type}')

------------------- similar code (pruned) ------------------ score = 0.2 
def  ... ():
    if:    elif:
         ...  = LogisticRegression

idx = 1:------------------- similar code ------------------ index = 1, score = 1.0 
def get_mdl(self, y):
    y = y.values
    r = np.log((self.pr(1, y) / self.pr(0, y)))
    m = LogisticRegression(C=self.experiment.C, penalty=self.experiment.penalty, dual=self.experiment.dual, solver=self.experiment.solver, max_iter=self.experiment.max_iter, class_weight=self.experiment.class_weight)
    x_nb = self.trn_term_doc.multiply(r)
    return (m.fit(x_nb, y), r)

------------------- similar code (pruned) ------------------ score = 0.2 
def  ... ():
     ...  = LogisticRegression

