------------------------- example 1 ------------------------ 
def model_stats(self):
    columns = self.get_top_k()
    model_combinations = self.model_features_combination(columns)
    model_rsquares = {}
    if (self.objective == 1):
        for i in tqdm(model_combinations):
            for j in i:
                train_features = list(j)
                lin_reg = LinearRegression()
                lin_reg.fit(self.data[train_features], self.data[self.target])
                r_squared = lin_reg.score(self.data[list(j)], self.data[self.target])
                model_rsquares[' '.join(train_features)] = r_squared
    else:
        for i in tqdm(model_combinations):
            for j in i:
                train_features = list(j)
                if (self.pseudo_r2 == 'mcfadden'):
                    r_squared = self.McFadden_RSquare(train_features)
                elif (self.pseudo_r2 == 'nagelkerke'):
                    r_squared = self.Nagelkerke_Rsquare(train_features)
                elif (self.pseudo_r2 == 'cox_and_snell'):
                    r_squared = self.Cox_and_Snell_Rsquare(train_features)
                elif (self.pseudo_r2 == 'estrella'):
                    r_squared = self.Estrella(train_features)
                model_rsquares[' '.join(train_features)] = r_squared
    self.model_rsquares = model_rsquares
    return self.model_rsquares

examples  ||  representativeness  ||  number of lines  || number of comments 
example1  ||          2           ||        27         ||         0        

avg       ||          2.0           ||        27.0         ||         0.0        

idx = 0:------------------- similar code ------------------ index = 1, score = 1.0 
def model_stats(self):
    columns = self.get_top_k()
    model_combinations = self.model_features_combination(columns)
    model_rsquares = {}
    if (self.objective == 1):
        for i in tqdm(model_combinations):
            for j in i:
                train_features = list(j)
                lin_reg = LinearRegression()
                lin_reg.fit(self.data[train_features], self.data[self.target])
                r_squared = lin_reg.score(self.data[list(j)], self.data[self.target])
                model_rsquares[' '.join(train_features)] = r_squared
    else:
        for i in tqdm(model_combinations):
            for j in i:
                train_features = list(j)
                if (self.pseudo_r2 == 'mcfadden'):
                    r_squared = self.McFadden_RSquare(train_features)
                elif (self.pseudo_r2 == 'nagelkerke'):
                    r_squared = self.Nagelkerke_Rsquare(train_features)
                elif (self.pseudo_r2 == 'cox_and_snell'):
                    r_squared = self.Cox_and_Snell_Rsquare(train_features)
                elif (self.pseudo_r2 == 'estrella'):
                    r_squared = self.Estrella(train_features)
                model_rsquares[' '.join(train_features)] = r_squared
    self.model_rsquares = model_rsquares
    return self.model_rsquares

------------------- similar code (pruned) ------------------ score = 0.2 
def  ... ( ... ):
    if:
        for  ...  in:
            for  ...  in  ... :
                 ...  = LinearRegression()

idx = 1:------------------- similar code ------------------ index = 0, score = 1.0 
def complete_model_rsquare(self):
    if (self.data_format == 0):
        print(('Selecting %s Best Predictors for the Model' % self.top_k))
        columns = self.get_top_k()
        print('Selected Predictors : ', columns)
        print()
        if (self.objective == 1):
            print(('*' * 20), ' R-Squared of Complete Model : ', ('*' * 20))
            lin_reg = LinearRegression()
            lin_reg.fit(self.data[columns], self.data[self.target])
            r_squared = lin_reg.score(self.data[columns], self.data[self.target])
            print(('R Squared : %s' % r_squared))
            print()
        else:
            print(('*' * 20), ' Pseudo R-Squared of Complete Model : ', ('*' * 20))
            print()
            if (self.pseudo_r2 == 'mcfadden'):
                print(("MacFadden's R-Squared : %s " % self.McFadden_RSquare(columns)))
            elif (pseudo_r2 == 'nagelkerke'):
                print(('Nagelkerke R-Squared : %s ' % self.Nagelkerke_Rsquare(columns)))
            elif (pseudo_r2 == 'cox_and_snell'):
                print(('Cox and Snell R-Squared : %s ' % self.Cox_and_Snell_Rsquare(columns)))
            else:
                print(('Estrella R-Squared : %s ' % self.Estrella(columns)))
            print()
    else:
        if (self.data_format == 2):
            columns = list(self.data.columns.values)
            d = np.sqrt(self.data.values.diagonal())
            corr_array = ((self.data.values.T / d).T / d)
            self.data = pd.DataFrame(data=corr_array, index=columns)
            self.data.columns = columns
            print()
        columns = list(self.data.columns.values)
        columns.remove(self.target)
        corr_all_matrix = self.data.loc[(columns, [self.target])]
        corr_pred_matrix = self.data.loc[(columns, columns)]
        corr_pred_matrix_inverse = pd.DataFrame(np.linalg.pinv(corr_pred_matrix.values), corr_pred_matrix.columns, corr_pred_matrix.index)
        beta = corr_pred_matrix_inverse.dot(corr_all_matrix)
        corr_all_matrix_transpose = corr_all_matrix.transpose()
        r_squared = corr_all_matrix_transpose.dot(beta)
        print(('R Squared : %s' % r_squared.iloc[(0, 0)]))
        print()

------------------- similar code (pruned) ------------------ score = 0.2 
def  ... ( ... ):
    if:
        print()
        if:
             ...  = LinearRegression()
            print()

