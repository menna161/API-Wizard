import typing
import matchzoo as mz
from matchzoo.engine.base_metric import BaseMetric
from .tuner import Tuner


def tune(params: 'mz.ParamTable', train_data: typing.Union[(mz.DataPack, mz.DataGenerator)], test_data: typing.Union[(mz.DataPack, mz.DataGenerator)], fit_kwargs: dict=None, evaluate_kwargs: dict=None, metric: typing.Union[(str, BaseMetric)]=None, mode: str='maximize', num_runs: int=10, callbacks: typing.List['mz.auto.tuner.callbacks.Callback']=None, verbose=1):
    "\n    Tune model hyper-parameters.\n\n    A simple shorthand for using :class:`matchzoo.auto.Tuner`.\n\n    `model.params.hyper_space` reprensents the model's hyper-parameters\n    search space, which is the cross-product of individual hyper parameter's\n    hyper space. When a `Tuner` builds a model, for each hyper parameter in\n    `model.params`, if the hyper-parameter has a hyper-space, then a sample\n    will be taken in the space. However, if the hyper-parameter does not\n    have a hyper-space, then the default value of the hyper-parameter will\n    be used.\n\n    See `tutorials/model_tuning.ipynb` for a detailed walkthrough on usage.\n\n    :param params: A completed parameter table to tune. Usually `model.params`\n        of the desired model to tune. `params.completed()` should be `True`.\n    :param train_data: Training data to use. Either a preprocessed `DataPack`,\n        or a `DataGenerator`.\n    :param test_data: Testing data to use. A preprocessed `DataPack`.\n    :param fit_kwargs: Extra keyword arguments to pass to `fit`.\n        (default: `dict(epochs=10, verbose=0)`)\n    :param evaluate_kwargs: Extra keyword arguments to pass to `evaluate`.\n    :param metric: Metric to tune upon. Must be one of the metrics in\n        `model.params['task'].metrics`. (default: the first metric in\n        `params.['task'].metrics`.\n    :param mode: Either `maximize` the metric or `minimize` the metric.\n        (default: 'maximize')\n    :param num_runs: Number of runs. Each run takes a sample in\n        `params.hyper_space` and build a model based on the sample.\n        (default: 10)\n    :param callbacks: A list of callbacks to handle. Handled sequentially\n        at every callback point.\n    :param verbose: Verbosity. (default: 1)\n\n    Example:\n        >>> import matchzoo as mz\n        >>> train = mz.datasets.toy.load_data('train')\n        >>> dev = mz.datasets.toy.load_data('dev')\n        >>> prpr = mz.models.DenseBaseline.get_default_preprocessor()\n        >>> train = prpr.fit_transform(train, verbose=0)\n        >>> dev = prpr.transform(dev, verbose=0)\n        >>> model = mz.models.DenseBaseline()\n        >>> model.params['input_shapes'] = prpr.context['input_shapes']\n        >>> model.params['task'] = mz.tasks.Ranking()\n        >>> results = mz.auto.tune(\n        ...     params=model.params,\n        ...     train_data=train,\n        ...     test_data=dev,\n        ...     num_runs=1,\n        ...     verbose=0\n        ... )\n        >>> sorted(results['best'].keys())\n        ['#', 'params', 'sample', 'score']\n\n    "
    tuner = Tuner(params=params, train_data=train_data, test_data=test_data, fit_kwargs=fit_kwargs, evaluate_kwargs=evaluate_kwargs, metric=metric, mode=mode, num_runs=num_runs, callbacks=callbacks, verbose=verbose)
    return tuner.tune()
