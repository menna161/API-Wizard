examples  ||  representativeness  ||  number of lines  || number of comments 

avg       ||          0           ||        0         ||         0        

idx = 0:------------------- similar code ------------------ index = 1, score = 5.0 
def get_multivariate_simple():
    dim = 3
    scale = np.identity(3, dtype=np.float32)
    num_datapoints = 4
    data = np.array([[0.0, 1.0, 0.0], [(- 0.2), 1.1, 0.1], [0.5, 1.2, 0.2], [1.0, (- 0.2), (- 1.2)]], dtype=np.float32)

    def multivariate_normal_model(num_datapoints):
        A = ed.Wishart(df=dim, scale=scale, name='A')
        x = ed.MultivariateNormalFullCovariance(loc=tf.zeros(dim), covariance_matrix=A, name='x')
        loc = (tf.ones([num_datapoints, 1]) * x)
        y = ed.Normal(loc=loc, scale=1.0, name='y')
        return y
    model_args = [num_datapoints]
    observed = {'y': data}
    varnames = ['V', 'x']
    param_names = [p for v in varnames for p in ((v + '_a'), (v + '_b'), (v + '_c'))]
    noncentered_parameterization = {p: 0.0 for p in param_names}
    make_to_centered = build_make_to_centered(multivariate_normal_model, model_args=model_args, observed_data=observed)
    make_to_partially_noncentered = build_make_to_partially_noncentered(multivariate_normal_model, model_args=model_args, observed_data=observed)
    to_centered = make_to_centered(**noncentered_parameterization)
    to_noncentered = make_to_noncentered(multivariate_normal_model, model_args=model_args, observed_data=observed)
    return ModelConfig(multivariate_normal_model, model_args, observed, to_centered, to_noncentered, make_to_centered, make_to_partially_noncentered, None)

------------------- similar code (pruned) ------------------ score = 0.46153846153846156 
def  ... ():
     ...  = np.identity

idx = 1:------------------- similar code ------------------ index = 0, score = 4.0 
def load_batch(fpath):
    f = open(fpath, 'rb').read()
    size = (((32 * 32) * 3) + 1)
    labels = []
    images = []
    for i in range(10000):
        arr = np.fromstring(f[(i * size):((i + 1) * size)], dtype=np.uint8)
        lab = np.identity(10)[arr[0]]
        img = arr[1:].reshape((3, 32, 32)).transpose((1, 2, 0))
        labels.append(lab)
        images.append(((img / 255) - 0.5))
    return (np.array(images), np.array(labels))

------------------- similar code (pruned) ------------------ score = 0.35714285714285715 
def  ... ( ... ):
    for  ...  in:
         ...  = np
         ...  =  ... .identity

